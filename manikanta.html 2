<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CPU Scheduler Simulator</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <style>
        .gantt-block {
            display: inline-block;
            padding: 8px 15px;
            background-color: #4CAF50;
            margin: 2px;
            color: white;
            border-radius: 4px;
            min-width: 60px;
            text-align: center;
        }
        .error-message {
            color: #dc3545;
            font-size: 0.9em;
            margin-top: 5px;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container mt-5 mb-5">
        <h1 class="text-center mb-4">CPU Scheduler Simulator</h1>
        
        <div class="card p-4 mb-4">
            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="numProcesses" class="form-label">Number of Processes:</label>
                    <input type="number" id="numProcesses" class="form-control" min="1" max="20" placeholder="1-20">
                </div>

                <div class="col-md-4 mb-3">
                    <label for="algorithm" class="form-label">Scheduling Algorithm:</label>
                    <select id="algorithm" class="form-select">
                        <option value="FCFS">First Come First Serve (FCFS)</option>
                        <option value="SJF">Shortest Job First (Non-Preemptive)</option>
                        <option value="SJF-Preemptive">Shortest Job First (Preemptive)</option>
                        <option value="RR">Round Robin (RR)</option>
                        <option value="Priority">Priority Scheduling (Non-Preemptive)</option>
                        <option value="Priority-Preemptive">Priority Scheduling (Preemptive)</option>
                    </select>
                </div>

                <div class="col-md-4 mb-3" id="quantumInput" style="display:none;">
                    <label for="quantum" class="form-label">Time Quantum:</label>
                    <input type="number" id="quantum" class="form-control" min="1" placeholder="Enter time quantum">
                </div>
            </div>

            <button class="btn btn-primary w-100" onclick="generateInputs()">Generate Process Inputs</button>
        </div>

        <div id="processInputs" class="mt-4"></div>
        <button id="runButton" class="btn btn-success w-100 mt-3" onclick="runScheduler()" disabled>Run Scheduler</button>

        <div class="card mt-5 p-4">
            <h2 class="mb-4">Simulation Results</h2>
            <div id="results"></div>
        </div>
    </div>

    <script>
        document.getElementById("algorithm").addEventListener("change", function() {
            document.getElementById("quantumInput").style.display = this.value === "RR" ? "block" : "none";
        });

        function generateInputs() {
            const num = parseInt(document.getElementById('numProcesses').value);
            const container = document.getElementById('processInputs');
            container.innerHTML = '';

            for (let i = 0; i < num; i++) {
                container.innerHTML += `
                    <div class="mb-2">
                        <label>Process ${i + 1}:</label>
                        <input type="number" placeholder="Arrival Time" id="arrival${i}">
                        <input type="number" placeholder="Burst Time" id="burst${i}">
                        <input type="number" placeholder="Priority (optional)" id="priority${i}">
                    </div>`;
            }
            document.getElementById("runButton").disabled = false;
        }

        async function runScheduler() {
            const num = parseInt(document.getElementById('numProcesses').value);
            const algorithm = document.getElementById('algorithm').value;
            const quantum = algorithm === 'RR' ? parseInt(document.getElementById('quantum').value) : 2;
            let processes = [];

            for (let i = 0; i < num; i++) {
                const arrival = parseInt(document.getElementById(`arrival${i}`).value) || 0;
                const burst = parseInt(document.getElementById(`burst${i}`).value);
                const priority = parseInt(document.getElementById(`priority${i}`).value) || 0;
                processes.push({ pid: i + 1, arrival, burst, priority });
            }

            const response = await fetch('http://127.0.0.1:5000/schedule', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ algorithm, quantum, processes })
            });

            const result = await response.json();
            document.getElementById('results').innerHTML = `
                <p><strong>Average Waiting Time:</strong> ${result.avg_waiting_time.toFixed(2)} units</p>
                <p><strong>Average Turnaround Time:</strong> ${result.avg_turnaround_time.toFixed(2)} units</p>
                <h4>Gantt Chart</h4>
                ${result.gantt_chart.map(p => `<div class="gantt-block">P${p[0]} (${p[1]}-${p[2]})</div>`).join('')}`;
        }
    </script>
</body>
</html>
